

import os
from pathlib import Path
import tempfile
from typing import Any, Dict, List
import toml
from pydantic import BaseModel, Field
from pydantic_core import MultiHostUrl
from py_configorm.core import ConfigSchema

toml_cfg = """
    [Service]
    Host = "localhost"
    Port = 8080
    """

json_cfg = """
    {
        "Service": {
            "Port": 18080
        },
        "Store": {
            "Url": "postgresql://localhost:5432/store",
            "Debug": true,
            "ConnectionPoolDebug": true
        }
    }
    """

dotenv_cfg = """
    CFGORM_Cache__Url="redis://localhost:6379/0"
    """

class SampleServiceOpsConfig(BaseModel):
    toggle: bool = Field(default=True, required=True, alias="toggle")

class SampleServiceConfig(BaseModel):
    Host: str = Field(default="localhost", required=True, alias="host")
    Port: int = Field(default=8080, required=True, alias="port")
    # Ops: SampleServiceOpsConfig

class SampleStoreConfig(BaseModel):
    URL: MultiHostUrl = Field(required=True, alias="url")
    Debug: bool = Field(default=True, required=True, alias="debug")
    ConnectionPoolDebug: bool = Field(default=True, required=True, alias="connectionPoolDebug")

class SampleConfig(ConfigSchema):
    magic: str = Field(alias="Magic")
    service: SampleServiceConfig
    store: SampleStoreConfig

    @classmethod
    def load_test(cls, config_list: List[Dict[Any, Any]]):
        for k, v in cls.model_fields.items():
            if issubclass(v.annotation, BaseModel):
                for ks, vs in v.annotation.model_fields.items():
                    if issubclass(vs.annotation, BaseModel):
                        raise TypeError("Only one level of nested objects is supported.")
                    #vs.alias = "{0}.{1}".format(k, ks)
                    print(vs)
            else:
                print(v)
                for config in config_list:
                    print(config[k])

if __name__ == "__main__":

    config_file_toml = Path(os.path.join(tempfile.mkdtemp(), "config.toml"))
    config_file_toml.write_text(toml_cfg)

    config_file_json = Path(os.path.join(tempfile.mkdtemp(), "config.json"))
    config_file_json.write_text(json_cfg)

    config_file_dotenv = Path(os.path.join(tempfile.mkdtemp(), "config.env"))
    config_file_dotenv.write_text(dotenv_cfg)

    config =toml.load(config_file_toml)

    SampleConfig.load_test([config])

    # map_: Dict[str, Any] = {}

    # for k, v in SampleConfig.model_fields.items():
    #     if issubclass(v.annotation, BaseModel):
    #         for ks, vs in v.annotation.model_fields.items():
    #             if k not in map_.keys():
    #                 map_[k] = {ks: ""}
    #             else:
    #                 if ks not in map_[k].keys():
    #                     map_[k][ks] = ""
    #                 else:
    #                     print("Error: Key {0} already exists for {1}.".format(ks, k))
    #     else:
    #         if k not in map_.keys():
    #             map_[k] = ""
    #         else:
    #             print("Error: Key {0} already exists.".format(k))

    # print(map_)

    # for k, v in SampleConfig.model_fields.items():
    #     if issubclass(v.annotation, BaseModel):
    #         for ks, vs in v.annotation.model_fields.items():
    #             if issubclass(vs.annotation, BaseModel):
    #                 raise TypeError("Only one level of nested objects is supported.")
    #             vs.alias = "{0}.{1}".format(k, ks)
    #             print(vs)
    #     else:
    #         v.alias = "{0}".format(k)