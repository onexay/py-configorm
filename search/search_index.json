{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Configuration ORM for Python applications A python library which provides ORM like semantics to application configuration. At present, it provides the expected functionality but requires some more work in terms of error handling. The library works on the concept of configuration sources. Currently following sources are supported, TOML JSON YAML DotEnv Environment Variables User defines a application settings schema by subclassing from Pydantic BaseModel class. User can choose one or more configuration sources to create a Pydantic object based on application configuration schema. Library will then try to read from all provided configuration sources and merge them to build the pydantic application configuration object. Name of keys in configuration sources and confguration schema MUST match. It would have been nice to decouple two, but for the intended functionality, it's a minor enhancement. Configuration sources are provided as a list of objects and precedence and priority of sources is determined by ordering of the sources in the list, e.g. first source in the list has lowest precendence, last one has the highest. If the configuration supports, library provides ability to save functionality for the application configuration object. By default, write capability is disabled. Configuration Source Read Read-Write TOML Yes Yes JSON Yes Yes YAML Yes Yes DotEnv Yes No Environment Variable Yes Yes Here is an example: { \"Service\": { \"Host\": \"localhost\", \"Port\": 18080 }, } class TestServiceConfig(BaseModel): Host: str = Field(..., description=\"Host running the service\") Port: int = Field(..., description=\"Port bound to the service\") class TestConfig(ConfigSchema): Service: TestServiceConfig = Field(..., description=\"Service configuration\") json_source = JSONSource(file_path=Path(config_file_json)) cfg_orm = ConfigORM(schema=TestConfig, sources=[json_source]) cfg: TestConfig = cfg_orm.load_config() print(cfg)","title":"Home"},{"location":"#configuration-orm-for-python-applications","text":"A python library which provides ORM like semantics to application configuration. At present, it provides the expected functionality but requires some more work in terms of error handling. The library works on the concept of configuration sources. Currently following sources are supported, TOML JSON YAML DotEnv Environment Variables User defines a application settings schema by subclassing from Pydantic BaseModel class. User can choose one or more configuration sources to create a Pydantic object based on application configuration schema. Library will then try to read from all provided configuration sources and merge them to build the pydantic application configuration object. Name of keys in configuration sources and confguration schema MUST match. It would have been nice to decouple two, but for the intended functionality, it's a minor enhancement. Configuration sources are provided as a list of objects and precedence and priority of sources is determined by ordering of the sources in the list, e.g. first source in the list has lowest precendence, last one has the highest. If the configuration supports, library provides ability to save functionality for the application configuration object. By default, write capability is disabled. Configuration Source Read Read-Write TOML Yes Yes JSON Yes Yes YAML Yes Yes DotEnv Yes No Environment Variable Yes Yes Here is an example: { \"Service\": { \"Host\": \"localhost\", \"Port\": 18080 }, } class TestServiceConfig(BaseModel): Host: str = Field(..., description=\"Host running the service\") Port: int = Field(..., description=\"Port bound to the service\") class TestConfig(ConfigSchema): Service: TestServiceConfig = Field(..., description=\"Service configuration\") json_source = JSONSource(file_path=Path(config_file_json)) cfg_orm = ConfigORM(schema=TestConfig, sources=[json_source]) cfg: TestConfig = cfg_orm.load_config() print(cfg)","title":"Configuration ORM for Python applications"},{"location":"core/","text":"Classes ConfigORM Functions load_config() Load configuration data from all the sources. This method loads the configuration data from all the sources specified during the initialization of this class. The configuration data is merged together and returned as a single ConfigSchema object. Returns: ConfigSchema ( ConfigSchema ) \u2013 The loaded configuration data. reload_config() Reload configuration data from all the sources. This method reloads the configuration data from all the sources specified during the initialization of this class. The configuration data is merged together and returned as a single ConfigSchema object. save_config() Save configuration data to all the sources. This method saves the configuration data to all the sources specified during the initialization of this class. Raises: PermissionError \u2013 If one of the sources is read-only. ConfigSchema Bases: BaseModel This is a placeholder schema for user-defined application configuration schema.","title":"Core"},{"location":"core/#configorm.core-classes","text":"","title":"Classes"},{"location":"core/#configorm.core.ConfigORM","text":"","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;ConfigORM"},{"location":"core/#configorm.core.ConfigORM-functions","text":"","title":"Functions"},{"location":"core/#configorm.core.ConfigORM.load_config","text":"Load configuration data from all the sources. This method loads the configuration data from all the sources specified during the initialization of this class. The configuration data is merged together and returned as a single ConfigSchema object. Returns: ConfigSchema ( ConfigSchema ) \u2013 The loaded configuration data.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;load_config"},{"location":"core/#configorm.core.ConfigORM.reload_config","text":"Reload configuration data from all the sources. This method reloads the configuration data from all the sources specified during the initialization of this class. The configuration data is merged together and returned as a single ConfigSchema object.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;reload_config"},{"location":"core/#configorm.core.ConfigORM.save_config","text":"Save configuration data to all the sources. This method saves the configuration data to all the sources specified during the initialization of this class. Raises: PermissionError \u2013 If one of the sources is read-only.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;save_config"},{"location":"core/#configorm.core.ConfigSchema","text":"Bases: BaseModel This is a placeholder schema for user-defined application configuration schema.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;ConfigSchema"},{"location":"sources/","text":"ENVSource: A class for a environment variable configuration source. This module contains the ENVSource class, a class for a environment variable configuration source. It provides methods to load and save configuration data from/to environment variables. Attributes: ENVSource ( ENVSource ) \u2013 The ENVSource class. Classes ENVSource Bases: SourceBase Class for a environment variable configuration source. This class is a subclass of SourceBase and represents a environment variable configuration source. It provides methods to load and save configuration data from/to environment variables. Environment variables are defined as per [PREFIX]_[KEY][NESTING_SLUG][SUBKEY] = [VALUE] format. For example, if PREFIX is set to CFGORM and NESTING_SLUG is set to __ , then environment variables will be defined as CFGORM_[KEY]__[SUBKEY] = VALUE . For providing bidirectional mutation operations for ORM, these variables need to be converted to a dictionary following the semantics of the user specified by subclassing configorm.core.ConfigSchema . Attributes: prefix ( str ) \u2013 The prefix for environment variables. nesting_slug ( str ) \u2013 The string used to determine nesting in environment variables. Methods: Name Description __init__ str = \"CFGORM\", readonly: bool = True, nesting_slug: str = \"__\"): Initializes a new instance of ENVSource . load Load configuration data from this source. Returns: dict: The loaded configuration data. save dict): Save configuration data to this source. Args: data (dict): The configuration data to save. reload Reload configuration data from this source. This method is called when the application is reloaded and the configuration data must be reloaded from the source. Functions load() Load configuration data from this source. Returns: dict ( dict ) \u2013 The loaded configuration data. save(data) Save configuration data to this source. Parameters: data ( dict ) \u2013 The configuration data to save.","title":"Sources"},{"location":"sources/#configorm.sources.env_source-classes","text":"","title":"Classes"},{"location":"sources/#configorm.sources.env_source.ENVSource","text":"Bases: SourceBase Class for a environment variable configuration source. This class is a subclass of SourceBase and represents a environment variable configuration source. It provides methods to load and save configuration data from/to environment variables. Environment variables are defined as per [PREFIX]_[KEY][NESTING_SLUG][SUBKEY] = [VALUE] format. For example, if PREFIX is set to CFGORM and NESTING_SLUG is set to __ , then environment variables will be defined as CFGORM_[KEY]__[SUBKEY] = VALUE . For providing bidirectional mutation operations for ORM, these variables need to be converted to a dictionary following the semantics of the user specified by subclassing configorm.core.ConfigSchema . Attributes: prefix ( str ) \u2013 The prefix for environment variables. nesting_slug ( str ) \u2013 The string used to determine nesting in environment variables. Methods: Name Description __init__ str = \"CFGORM\", readonly: bool = True, nesting_slug: str = \"__\"): Initializes a new instance of ENVSource . load Load configuration data from this source. Returns: dict: The loaded configuration data. save dict): Save configuration data to this source. Args: data (dict): The configuration data to save. reload Reload configuration data from this source. This method is called when the application is reloaded and the configuration data must be reloaded from the source.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;ENVSource"},{"location":"sources/#configorm.sources.env_source.ENVSource-functions","text":"","title":"Functions"},{"location":"sources/#configorm.sources.env_source.ENVSource.load","text":"Load configuration data from this source. Returns: dict ( dict ) \u2013 The loaded configuration data.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;load"},{"location":"sources/#configorm.sources.env_source.ENVSource.save","text":"Save configuration data to this source. Parameters: data ( dict ) \u2013 The configuration data to save.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;save"},{"location":"sources/dotenv/","text":"Configorm - A simple configuration library. This module contains the DOTENVSource class, a class for a dotenv configuration source. Attributes: DOTENVSource ( DOTENVSource ) \u2013 The DOTENVSource class. Classes DOTENVSource Bases: SourceBase Class for a dotenv configuration source. This class is a subclass of SourceBase and represents a dotenv configuration source. It provides methods to load and save configuration data from/to a dotenv file. Attributes: _file_path ( Path ) \u2013 The path to the dotenv configuration file. Methods: Name Description __init__ Path, readonly: bool = True): Initializes a new instance of DOTENVSource . load Load configuration data from this source. Returns: dict: The loaded configuration data. save dict): Save configuration data to this source. Args: data (dict): The configuration data to save. reload Reload configuration data from this source. This method is called when the application is reloaded and the configuration data must be reloaded from the source. Functions load() Load configuration data from this source. This method loads the configuration data from the dotenv file specified during the initialization of this class. Returns: dict ( dict ) \u2013 The loaded configuration data. Raises: FileNotFoundError \u2013 If the specified dotenv file does not exist. save(data) Save configuration data to this source. This method saves the configuration data to the dotenv file specified during the initialization of this class. Parameters: data ( dict ) \u2013 The configuration data to save. Raises: PermissionError \u2013 If the source is read-only.","title":"DotEnv File"},{"location":"sources/dotenv/#configorm.sources.dotenv_source-classes","text":"","title":"Classes"},{"location":"sources/dotenv/#configorm.sources.dotenv_source.DOTENVSource","text":"Bases: SourceBase Class for a dotenv configuration source. This class is a subclass of SourceBase and represents a dotenv configuration source. It provides methods to load and save configuration data from/to a dotenv file. Attributes: _file_path ( Path ) \u2013 The path to the dotenv configuration file. Methods: Name Description __init__ Path, readonly: bool = True): Initializes a new instance of DOTENVSource . load Load configuration data from this source. Returns: dict: The loaded configuration data. save dict): Save configuration data to this source. Args: data (dict): The configuration data to save. reload Reload configuration data from this source. This method is called when the application is reloaded and the configuration data must be reloaded from the source.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;DOTENVSource"},{"location":"sources/dotenv/#configorm.sources.dotenv_source.DOTENVSource-functions","text":"","title":"Functions"},{"location":"sources/dotenv/#configorm.sources.dotenv_source.DOTENVSource.load","text":"Load configuration data from this source. This method loads the configuration data from the dotenv file specified during the initialization of this class. Returns: dict ( dict ) \u2013 The loaded configuration data. Raises: FileNotFoundError \u2013 If the specified dotenv file does not exist.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;load"},{"location":"sources/dotenv/#configorm.sources.dotenv_source.DOTENVSource.save","text":"Save configuration data to this source. This method saves the configuration data to the dotenv file specified during the initialization of this class. Parameters: data ( dict ) \u2013 The configuration data to save. Raises: PermissionError \u2013 If the source is read-only.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;save"},{"location":"sources/env/","text":"ENVSource: A class for a environment variable configuration source. This module contains the ENVSource class, a class for a environment variable configuration source. It provides methods to load and save configuration data from/to environment variables. Attributes: ENVSource ( ENVSource ) \u2013 The ENVSource class. Classes ENVSource Bases: SourceBase Class for a environment variable configuration source. This class is a subclass of SourceBase and represents a environment variable configuration source. It provides methods to load and save configuration data from/to environment variables. Environment variables are defined as per [PREFIX]_[KEY][NESTING_SLUG][SUBKEY] = [VALUE] format. For example, if PREFIX is set to CFGORM and NESTING_SLUG is set to __ , then environment variables will be defined as CFGORM_[KEY]__[SUBKEY] = VALUE . For providing bidirectional mutation operations for ORM, these variables need to be converted to a dictionary following the semantics of the user specified by subclassing configorm.core.ConfigSchema . Attributes: prefix ( str ) \u2013 The prefix for environment variables. nesting_slug ( str ) \u2013 The string used to determine nesting in environment variables. Methods: Name Description __init__ str = \"CFGORM\", readonly: bool = True, nesting_slug: str = \"__\"): Initializes a new instance of ENVSource . load Load configuration data from this source. Returns: dict: The loaded configuration data. save dict): Save configuration data to this source. Args: data (dict): The configuration data to save. reload Reload configuration data from this source. This method is called when the application is reloaded and the configuration data must be reloaded from the source. Functions load() Load configuration data from this source. Returns: dict ( dict ) \u2013 The loaded configuration data. save(data) Save configuration data to this source. Parameters: data ( dict ) \u2013 The configuration data to save.","title":"Environment Variables"},{"location":"sources/env/#configorm.sources.env_source-classes","text":"","title":"Classes"},{"location":"sources/env/#configorm.sources.env_source.ENVSource","text":"Bases: SourceBase Class for a environment variable configuration source. This class is a subclass of SourceBase and represents a environment variable configuration source. It provides methods to load and save configuration data from/to environment variables. Environment variables are defined as per [PREFIX]_[KEY][NESTING_SLUG][SUBKEY] = [VALUE] format. For example, if PREFIX is set to CFGORM and NESTING_SLUG is set to __ , then environment variables will be defined as CFGORM_[KEY]__[SUBKEY] = VALUE . For providing bidirectional mutation operations for ORM, these variables need to be converted to a dictionary following the semantics of the user specified by subclassing configorm.core.ConfigSchema . Attributes: prefix ( str ) \u2013 The prefix for environment variables. nesting_slug ( str ) \u2013 The string used to determine nesting in environment variables. Methods: Name Description __init__ str = \"CFGORM\", readonly: bool = True, nesting_slug: str = \"__\"): Initializes a new instance of ENVSource . load Load configuration data from this source. Returns: dict: The loaded configuration data. save dict): Save configuration data to this source. Args: data (dict): The configuration data to save. reload Reload configuration data from this source. This method is called when the application is reloaded and the configuration data must be reloaded from the source.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;ENVSource"},{"location":"sources/env/#configorm.sources.env_source.ENVSource-functions","text":"","title":"Functions"},{"location":"sources/env/#configorm.sources.env_source.ENVSource.load","text":"Load configuration data from this source. Returns: dict ( dict ) \u2013 The loaded configuration data.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;load"},{"location":"sources/env/#configorm.sources.env_source.ENVSource.save","text":"Save configuration data to this source. Parameters: data ( dict ) \u2013 The configuration data to save.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;save"},{"location":"sources/json/","text":"This module contains the JSONSource class, a class for a JSON configuration source. Attributes: JSONSource ( JSONSource ) \u2013 The JSONSource class. Classes JSONSource Bases: SourceBase A class for a JSON configuration source. Attributes: _file_path ( Path ) \u2013 The path to the JSON configuration file. Methods: Name Description __init__ Path, readonly: bool = True): Initializes a new instance of JSONSource . load Load configuration data from this source. Returns: dict: The loaded configuration data. save dict): Save configuration data to this source. Args: data (dict): The configuration data to save. reload Reload configuration data from this source. This method is called when the application is reloaded and the configuration data must be reloaded from the source. Functions load() Load configuration data from this source. This method loads the configuration data from the JSON file specified during the initialization of this class. Returns: dict ( dict ) \u2013 The loaded configuration data. Raises: FileNotFoundError \u2013 If the specified JSON file does not exist. JSONDecodeError \u2013 If there is an error decoding the JSON data. save(data) Save configuration data to this source. This method saves the configuration data to the JSON file specified during the initialization of this class. Parameters: data ( dict ) \u2013 The configuration data to save. Raises: PermissionError \u2013 If the source is read-only.","title":"JSON File"},{"location":"sources/json/#configorm.sources.json_source-classes","text":"","title":"Classes"},{"location":"sources/json/#configorm.sources.json_source.JSONSource","text":"Bases: SourceBase A class for a JSON configuration source. Attributes: _file_path ( Path ) \u2013 The path to the JSON configuration file. Methods: Name Description __init__ Path, readonly: bool = True): Initializes a new instance of JSONSource . load Load configuration data from this source. Returns: dict: The loaded configuration data. save dict): Save configuration data to this source. Args: data (dict): The configuration data to save. reload Reload configuration data from this source. This method is called when the application is reloaded and the configuration data must be reloaded from the source.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;JSONSource"},{"location":"sources/json/#configorm.sources.json_source.JSONSource-functions","text":"","title":"Functions"},{"location":"sources/json/#configorm.sources.json_source.JSONSource.load","text":"Load configuration data from this source. This method loads the configuration data from the JSON file specified during the initialization of this class. Returns: dict ( dict ) \u2013 The loaded configuration data. Raises: FileNotFoundError \u2013 If the specified JSON file does not exist. JSONDecodeError \u2013 If there is an error decoding the JSON data.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;load"},{"location":"sources/json/#configorm.sources.json_source.JSONSource.save","text":"Save configuration data to this source. This method saves the configuration data to the JSON file specified during the initialization of this class. Parameters: data ( dict ) \u2013 The configuration data to save. Raises: PermissionError \u2013 If the source is read-only.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;save"},{"location":"sources/toml/","text":"This module contains the TOMLSource class, a class for a TOML configuration source. TOML (Tom's Obvious, Minimal Language) is a minimal configuration file format that is easy to read due to obvious semantics. This module is part of the configorm package for handling configuration data. Classes TOMLSource Bases: SourceBase Class for a TOML configuration source. This class is a subclass of SourceBase and represents a TOML configuration source. It provides methods to load and save configuration data from/to a TOML file. Attributes: _file_path ( Path ) \u2013 The path to the TOML configuration file. Methods: Name Description __init__ Path, readonly: bool = True): Initializes a new instance of TOMLSource . load Load configuration data from this source. Returns: dict: The loaded configuration data. save dict): Save configuration data to this source. Args: data (dict): The configuration data to save. reload Reload configuration data from this source. This method is called when the application is reloaded and the configuration data must be reloaded from the source. Functions load() Load configuration data from this source. This method loads the configuration data from the TOML file specified during the initialization of this class. Returns: dict ( dict ) \u2013 The loaded configuration data. Raises: FileNotFoundError \u2013 If the specified TOML file does not exist. save(data) Save configuration data to this source. This method saves the configuration data to the TOML file specified during the initialization of this class. Parameters: data ( dict ) \u2013 description Raises: PermissionError \u2013 description","title":"TOML File"},{"location":"sources/toml/#configorm.sources.toml_source-classes","text":"","title":"Classes"},{"location":"sources/toml/#configorm.sources.toml_source.TOMLSource","text":"Bases: SourceBase Class for a TOML configuration source. This class is a subclass of SourceBase and represents a TOML configuration source. It provides methods to load and save configuration data from/to a TOML file. Attributes: _file_path ( Path ) \u2013 The path to the TOML configuration file. Methods: Name Description __init__ Path, readonly: bool = True): Initializes a new instance of TOMLSource . load Load configuration data from this source. Returns: dict: The loaded configuration data. save dict): Save configuration data to this source. Args: data (dict): The configuration data to save. reload Reload configuration data from this source. This method is called when the application is reloaded and the configuration data must be reloaded from the source.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;TOMLSource"},{"location":"sources/toml/#configorm.sources.toml_source.TOMLSource-functions","text":"","title":"Functions"},{"location":"sources/toml/#configorm.sources.toml_source.TOMLSource.load","text":"Load configuration data from this source. This method loads the configuration data from the TOML file specified during the initialization of this class. Returns: dict ( dict ) \u2013 The loaded configuration data. Raises: FileNotFoundError \u2013 If the specified TOML file does not exist.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;load"},{"location":"sources/toml/#configorm.sources.toml_source.TOMLSource.save","text":"Save configuration data to this source. This method saves the configuration data to the TOML file specified during the initialization of this class. Parameters: data ( dict ) \u2013 description Raises: PermissionError \u2013 description","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;save"},{"location":"sources/yaml/","text":"This module contains the YAMLSource class, a class for a YAML configuration source. This module is part of the configorm package for handling configuration data. Classes YAMLSource Bases: SourceBase Class for a YAML configuration source. This class is a subclass of SourceBase and represents a YAML configuration source. It provides methods to load and save configuration data from/to a YAML file. Attributes: _file_path ( Path ) \u2013 The path to the YAML configuration file. Methods: Name Description __init__ Path, readonly: bool = True): Initializes a new instance of YAMLSource . load Load configuration data from this source. Returns: dict: The loaded configuration data. save dict): Save configuration data to this source. Args: data (dict): The configuration data to save. reload Reload configuration data from this source. This method is called when the application is reloaded and the configuration data must be reloaded from the source. Functions load() Load configuration data from this source. Returns: dict ( dict ) \u2013 The loaded configuration data. save(data) Save configuration data to this source. Parameters: data ( dict ) \u2013 The configuration data to save.","title":"YAML File"},{"location":"sources/yaml/#configorm.sources.yaml_source-classes","text":"","title":"Classes"},{"location":"sources/yaml/#configorm.sources.yaml_source.YAMLSource","text":"Bases: SourceBase Class for a YAML configuration source. This class is a subclass of SourceBase and represents a YAML configuration source. It provides methods to load and save configuration data from/to a YAML file. Attributes: _file_path ( Path ) \u2013 The path to the YAML configuration file. Methods: Name Description __init__ Path, readonly: bool = True): Initializes a new instance of YAMLSource . load Load configuration data from this source. Returns: dict: The loaded configuration data. save dict): Save configuration data to this source. Args: data (dict): The configuration data to save. reload Reload configuration data from this source. This method is called when the application is reloaded and the configuration data must be reloaded from the source.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;YAMLSource"},{"location":"sources/yaml/#configorm.sources.yaml_source.YAMLSource-functions","text":"","title":"Functions"},{"location":"sources/yaml/#configorm.sources.yaml_source.YAMLSource.load","text":"Load configuration data from this source. Returns: dict ( dict ) \u2013 The loaded configuration data.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;load"},{"location":"sources/yaml/#configorm.sources.yaml_source.YAMLSource.save","text":"Save configuration data to this source. Parameters: data ( dict ) \u2013 The configuration data to save.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;save"}]}